:numbered:
:author: Agostinho Brito
:data-uri:
:icons:
:experimental:
:stem:
:imagesdir: ./figs
:toc: left
:doctype: book
:source-highlighter: pygments
:caution-caption: Cuidado
:important-caption: Importante
:note-caption: Nota
:tip-caption: Dica
:warning-caption: Aviso
:appendix-caption: Appêndice
:example-caption: Exemplo
:figure-caption: Figura
:listing-caption: Listagem
:table-caption: Tabela
:toc-title: Sumário
:preface-title: Prefácio
:version-label: Versão
:last-update-label: Última atualização

= Tarefas de programação em C++ (Segunda Unidade) 

== Projeto 1 - Tratamento de polígonos 

Seu projeto deverá ser capaz de armazenar e realizar operações com
polígonos formados por conjuntos de pontos em duas dimensões.

Deve ser previsto no projeto a criação de três classes:

* Ponto
* Poligono
* Retangulo

=== Etapa 1 - Criação da classe `Ponto` ===

Crie uma classe denominada Pointo para representar pontos no espaço
bidimensional. Na sua implementação, você deverá encapsular duas
variáveis x e y do tipo float para guardar a posição do ponto. Apenas
as funções da classe poderão ter acesso direto a essas variávies, de
modo que os clientes da classe somente poderão modificá-las usando
métodos específicos que você definir. Implemente, na sua classe,
métodos que realizem as seguintes operações:

|====
|Função | Descrição

|`setX(float)`
|Define o valor da coordenada stem:[x]do ponto.

|`setY(float)`
|Define o valor da coordenada stem:[y] do ponto.

|`setXY(float,float)`
|Define, em uma mesma função, os valores da coordenadas stem:[x] e
 stem:[y] do ponto.
 
|`float getX()`
|Recupera o valor da coordenada stem:[x] do ponto.

|`float getY()`
|Recupera o valor da coordenada stem:[y] do ponto.

|`add(Point p1)`
|Adiciona as coordenadas stem:[(x,y)] do ponto com as coordenadas de
 um ponto stem:[P1(x_1,y_1)] fornecido, armazenando o resultado
 latexmath:[(x+x_1, y+y_1)] nas coordenadas de um novo ponto, que deverá
 ser retornado para o cliente da classe.
 
|`sub(Point p1)`
|Subtrai as coordenadas stem:[(x,y)] do ponto com as coordenadas de
 um ponto stem:[P1(x_1,y_1)] fornecido, armazenando o resultado
 stem:[(x-x_1, y-y_1)] nas coordenadas de um novo ponto, que deverá
 ser retornado para o cliente da classe.
 
|`norma()`
|Calcula a distância do ponto para a origem do sistema de
 coordenadas.
 
|`translada(float a, float b)`
| Translada o ponto stem:[(x, y)] de latexmath:[(+a, +b)], de modo que,
após a execução do método, as coordenadas do ponto serão stem:[(x+a, y+b)].

|`imprime()`
|Imprime o ponto na forma `(xpos, ypos)`.
|====

=== Etapa 2 - Criação da classe `Poligono` ===

Defina uma classe chamada `Poligono` para representar polígonos
convexos. Assuma que o tamanho dos polígonos será limitado a 100
vértices. Utilize a classe `Point` que você definiu na etapa anterior
para guardar informações com as posições dos stem:[N] vértices do
polígono. Sua classe deverá prever as seguintes funcionalidades:

* Inserir vértice no polígono. Assuma que os vértices deverão ser
  inseridos conforme a sequência (anti-horária) em que figuram ao
  redor do polígono. As arestas do polígono serão então compostas
  pelos segmentos latexmath:[(x_0,y_0) \rightarrow (x_1,y_1)],
  latexmath:[(x_1,y_1) \rightarrow (x_2,y_2)] etc., com exceção da
  última aresta, que será formada pelo segmento
  latexmath:[(x_{N-1},y_{N-1}) \rightarrow (x_0,y_0)].

* Recuperar a quantidade de vértices que foram inseridos no polígono

* Calcular a área do polígono. Procure na Internet a fundamentação
  matemática necessária para implementar essa funcionalidade.

* Transladar o polígono para latexmath:[(+a, +b)].

* Rotacionar o polígono de stem:[\theta] graus no sentido anti-horário
  em torno de um ponto latexmath:[(x_0, y_0)] fornecido pelo usuário.

* Imprimir o polígono armazenado da forma `(x0,y0)->(x1,y1)->(x2,y2)->...`

=== Etapa 3 - Criação da classe `Retangulo`

Utilizando a implementação da classe Poligono desenvolvida na etapa
anterior, crie uma subclasse `Retangulo` derivada da superclasse
`Poligono`. O construtor da nova classe deverá ser da forma
`Retangulo(int x, int y, int largura, int altura)`, denotando a
posição stem:[(x,y)] do retângulo no espaço e suas dimensões - altura
e largura. Realize com sua classe as seguintes tarefas:

* Assegure-se que o construtor da classe utilize os métodos da
  superclasse para armazenar a estrutura interna do retângulo.

* Crie um pequeno exemplo para testar sua implementação da classe
`Retangulo`.

* No exemplo, defina um novo retângulo na posição latexmath:[(x,y) =
(0,0)], com altura e largura iguais a `3` e `4`.


* Calcule a
sua área usando a função já implementada na classe Poligono. Mude a
posição do retângulo usando a função move(float,float) para e
recalcule a área do retângulo.
